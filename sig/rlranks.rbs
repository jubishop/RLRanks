type playlist = :doubles
              | :dropshot
              | :duel
              | :hoops
              | :rumble
              | :snow_day
              | :standard
              | :tournament

type platform = :steam
              | :epic
              | :ps
              | :xbox

class RLRanks[unchecked out Elem]
  include Enumerable[Elem]

  attr_reader id: Integer
  attr_reader account: Integer | String
  attr_reader platform: Symbol
  attr_reader ranks: {
    standard: Rank,
    doubles: Rank,
    duel: Rank,
    rumble: Rank,
    dropshot: Rank,
    hoops: Rank,
    snow_day: Rank,
    tournament: Rank
  }

  def initialize: (Integer id, Integer | String account, ?platform platform,
                   ?standard: Integer | Array[Integer],
                   ?doubles: Integer | Array[Integer],
                   ?duel: Integer | Array[Integer],
                   ?rumble: Integer | Array[Integer],
                   ?dropshot: Integer | Array[Integer],
                   ?hoops: Integer | Array[Integer],
                   ?snow_day: Integer | Array[Integer],
                   ?tournament: Integer | Array[Integer]) -> void

  def unranked?: (?Array[playlist] playlists) -> bool
  def best: (?Array[playlist] playlists) -> Rank?
  def each: -> (Enumerator[[playlist, Rank]])
  def rank: (playlist playlist) -> Rank
  def ==: (RLRanks other) -> bool

  private

  class Rank
    include Comparable

    attr_reader playlist: String
    attr_reader rank: Integer
    attr_reader mmr: Integer

    def initialize: (String playlist, ?Integer rank, ?Integer mmr) -> void

    def <=>: (Rank other) -> Integer
    def to_i: -> Integer
  end
end
